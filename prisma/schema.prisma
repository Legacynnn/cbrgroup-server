// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String      @id @default(uuid())
  name      String      @unique
  imageUrl  String?     // Optional image URL for the category
  featured  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relationship to furniture
  furniture Furniture[]
}

model ShowroomImage {
  id          String    @id @default(uuid())
  url         String
  position    Int       @default(0)
  title       String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("showroom_images")
}

model FurnitureImage {
  id          String    @id @default(uuid())
  url         String
  position    Int       @default(0)
  furniture   Furniture @relation(fields: [furnitureId], references: [id], onDelete: Cascade)
  furnitureId String

  @@index([furnitureId])
}

model Furniture {
  id                    String             @id @default(uuid())
  name                  String
  size                  Json?              
  description           String?            
  producer              String?            
  price                 Decimal?           
  featured              Boolean            @default(false)
  promotionPrice        Decimal?           
  isPromotionActive     Boolean            @default(false)
  promotionExpiresAt    DateTime?          
  inStock               Boolean            @default(true)
  categoryId            String             // Foreign key to Category
  category              Category           @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  variations            FurnitureVariation[]
  images                FurnitureImage[]   

  @@index([categoryId])
  @@index([featured])
  @@index([isPromotionActive])
  @@index([promotionExpiresAt])
}

model FurnitureVariation {
  id                   String   @id @default(uuid())
  name                 String   
  textureType          String   
  color                String?  
  colorCode            String?  
  textureImageUrl      String   
  associatedImageIds   Json?    
  inStock              Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  furniture     Furniture @relation(fields: [furnitureId], references: [id], onDelete: Cascade)
  furnitureId   String

  @@index([furnitureId])
}

enum QuoteStatus {
  OPEN
  ANSWERED
  BUDGET_WAITING
  BUDGET_ACCEPTED
  BUDGET_DENIED
  DELIVERED
}

model Quote {
  id           String      @id @default(uuid())
  customerName String
  customerEmail String
  customerPhone String
  postcode     String
  address      String
  message      String?
  status       QuoteStatus @default(OPEN)
  boardPosition Int        @default(0) // For drag-n-drop board ordering
  totalItems   Int         @default(0)
  adminNotes   String?     // Internal notes for admin
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  items        QuoteItem[]
  history      QuoteHistory[]

  @@index([status])
  @@index([boardPosition])
  @@index([createdAt])
}

model QuoteItem {
  id           String   @id @default(uuid())
  furnitureId  String
  furnitureName String  // Store name at time of quote
  category     String   // Store category at time of quote
  size         String?  // Store size at time of quote
  color        String?  // Store color variation if selected
  colorCode    String?  // Store color code if selected
  variationId  String?  // Reference to specific variation
  imageUrl     String?  // Store image URL at time of quote
  quantity     Int      @default(1)
  createdAt    DateTime @default(now())
  
  quote        Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId      String

  @@index([quoteId])
  @@index([furnitureId])
}

enum QuoteHistoryAction {
  CREATED
  STATUS_CHANGED
  POSITION_CHANGED
  ADMIN_NOTES_UPDATED
  CUSTOMER_INFO_UPDATED
  ITEMS_UPDATED
}

model QuoteHistory {
  id          String             @id @default(uuid())
  action      QuoteHistoryAction
  description String             // Human-readable description of what changed
  oldValue    Json?              // Previous value (for tracking changes)
  newValue    Json?              // New value (for tracking changes)
  performedBy String?            // Who made the change (admin user ID or 'system')
  createdAt   DateTime           @default(now())
  
  quote       Quote              @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId     String

  @@index([quoteId])
  @@index([createdAt])
}